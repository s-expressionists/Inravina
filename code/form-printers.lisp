(in-package #:inravina)

(defmethod pprint-bindings (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-format-logical-block (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (loop do (pprint-linear client stream (pprint-pop) t nil)
             (pprint-exit-if-list-exhausted)
             (write-char #\Space stream)
             (pprint-newline client stream :linear))))

(defmethod pprint-block (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :fill)
    (write (pprint-pop) :stream stream)))

(defmethod pprint-defun (client stream object &optional colon-p at-sign-p)
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-indent client stream :current 0)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-newline client stream :fill)
    (let ((arg (pprint-pop)))
      (when (and at-sign-p
                 arg
                 (symbolp arg))
        (write arg :stream stream)
        (pprint-exit-if-list-exhausted)
        (write-char #\Space stream)
        (pprint-newline client stream :fill)
        (setf arg (pprint-pop)))
      (pprint-lambda-list client stream arg t nil))))

(defmethod pprint-do (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-tagbody-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-indent client stream :current 0)
    (pprint-newline client stream :miser)
    (pprint-bindings client stream (pprint-pop) t nil)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-newline client stream :fill)
    (pprint-linear client stream (pprint-pop) t nil)))

(defmethod pprint-dolist (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-tagbody-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-fill client stream (pprint-pop) t nil)))

(defmethod pprint-eval-when (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-fill client stream (pprint-pop) t nil)))

(defmethod pprint-let (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-indent client stream :current 0)
    (pprint-newline client stream :miser)
    (pprint-bindings client stream (pprint-pop) t nil)))

(defmethod pprint-progn (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)))

(defmethod pprint-progv (client stream object &optional colon-p at-sign-p)
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :linear)
    (pprint-linear client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-newline client stream :linear)
    (pprint-linear client stream (pprint-pop) t nil)))

(defmethod pprint-tagbody (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-tagbody-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)))

(defmethod pprint-function-call (client stream object &optional colon-p at-sign-p argument-count)
  (declare (ignore at-sign-p))
  (pprint-function-call-form (client stream object colon-p at-sign-p argument-count)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-indent client stream :current 0)
    (pprint-newline client stream :fill)))

(defmethod pprint-argument-list (client stream object &optional colon-p at-sign-p argument-count)
  (declare (ignore at-sign-p))
  (pprint-function-call-form (client stream object colon-p at-sign-p argument-count)))

(defmethod pprint-with-hash-table-iterator (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-argument-list client stream (pprint-pop) t nil nil)))

(defmethod pprint-with-compilation-unit (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-argument-list client stream (pprint-pop) t nil 0)))

(defmethod pprint-pprint-logical-block (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-argument-list client stream (pprint-pop) t nil 2)))

(defmethod pprint-lambda-list (client stream object &optional colon-p at-sign-p)
  (pprint-format-logical-block (client stream object colon-p at-sign-p)
    (let ((state :required)
          (first t)
          (group nil))
      (loop (pprint-exit-if-list-exhausted)
            (unless first
              (write-char #\Space stream))
            (when group
              (pprint-indent client stream :current 0)
              (setf group nil))
            (let ((arg (pprint-pop)))
              (unless first
                (case arg
                  (&optional
                   (setf state :optional
                         group t)
                   (pprint-indent client stream :block 0)
                   (pprint-newline client stream :linear))
                  ((&rest &body)
                   (setf state :required
                         group t)
                   (pprint-indent client stream :block 0)
                   (pprint-newline client stream :linear))
                  (&key
                   (setf state :key
                         group t)
                   (pprint-indent client stream :block 0)
                   (pprint-newline client stream :linear))
                  (&aux
                   (setf state :optional
                         group t)
                   (pprint-indent client stream :block 0)
                   (pprint-newline client stream :linear))
                  (otherwise
                   (pprint-newline client stream :fill))))
              (ecase state
                (:required
                 (pprint-lambda-list client stream arg colon-p at-sign-p))
                ((:optional :key)
                 (pprint-format-logical-block (client stream arg colon-p at-sign-p)
                   (pprint-exit-if-list-exhausted)
                   (if (eq state :key)
                       (pprint-format-logical-block (client stream (pprint-pop) t nil)
                         (pprint-exit-if-list-exhausted)
                         (write (pprint-pop) :stream stream)
                         (pprint-exit-if-list-exhausted)
                         (write-char #\Space stream)
                         (pprint-newline client stream :fill)
                         (pprint-lambda-list stream (pprint-pop) t nil)
                         (loop (pprint-exit-if-list-exhausted)
                               (write-char #\Space stream)
                               (pprint-newline client stream :fill)
                               (write (pprint-pop) :stream stream)))
                       (pprint-lambda-list client stream (pprint-pop) t nil))
                   (loop (pprint-exit-if-list-exhausted)
                         (write-char #\Space stream)
                         (pprint-newline client stream :linear)
                         (write (pprint-pop) :stream stream))))))
            (setf first nil)))))

(defun top-level-clause-p (item)
  (and (symbolp item)
       (member item
               '(named with initially finally for as while until repeat
                 always never thereis)
               :key #'symbol-name :test #'string=)))

(defun conditional-clause-p (item)
  (and (symbolp item)
       (member item
               '(if when unless else)
               :key #'symbol-name :test #'string=)))

(defun selectable-clause-p (item)
  (and (symbolp item)
       (member item
               '(do doing if when unless else collect collecting append appending
                 nconc nconcing count counting sum summing maximize maximizing
                 minimize minimizing)
               :key #'symbol-name :test #'string=)))

(defun break-before-clause-p (item parent)
  (and (symbolp parent)
       (and (member parent
                    '(do doing initially finally)
                    :key #'symbol-name :test #'string=)
            (listp item))))

(defun break-after-clause-p (item parent)
  (and (symbolp parent)
       (and (member parent
                    '(with)
                    :key #'symbol-name :test #'string=)
            (symbolp item)
            (member item '(and) :key #'symbol-name :test #'string=))))

(defun end-clause-p (item parent)
  nil
  #+(or)(and (symbolp parent)
       (or (and (member parent
                        '(do doing initially finally)
                        :key #'symbol-name :test #'string=)
                (listp item))
           (and (member parent
                        '(with)
                        :key #'symbol-name :test #'string=)
                (symbolp item)
                (member item '(and) :key #'symbol-name :test #'string=)))))

(defun block-indent-clause-p (item)
  (and (symbolp item)
       (member item
               '(if when unless)
               :key #'symbol-name :test #'string=)))

(defun current-indent-clause-p (item)
  (and (symbolp item)
       (member item
               '(with initially finally do doing)
               :key #'symbol-name :test #'string=)))

(defun allow-break-p (item)
  (or (not (symbolp item))
      (not (member item '(do doing finally initially)
                   :key #'symbol-name :test #'string=))))

(defmethod pprint-extended-loop (client stream object)
  (pprint-format-logical-block (client stream object t nil)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-indent client stream :current 0)
    (let (allow-break-p clauses)
      (flet ((do-break ()
               (if allow-break-p
                 (pprint-newline client stream :mandatory)
                 (setf allow-break-p t)))
             (end-all-clauses ()
               (loop while clauses
                     do (pop clauses)
                        (pprint-end-logical-block client stream ""))))
        (unwind-protect
            (loop for item = (pprint-pop)
                  when (end-clause-p item (car clauses))
                    do (pop clauses)
                       (pprint-end-logical-block client stream "")
                  when (or (top-level-clause-p item)
                           (and (not (conditional-clause-p (car clauses)))
                                (selectable-clause-p item)))
                    do (end-all-clauses)
                  when (break-before-clause-p item (car clauses))
                    do (do-break)
                  when (or (top-level-clause-p item)
                           (selectable-clause-p item))
                    do (do-break)
                       (pprint-start-logical-block client stream "" nil)
                       (push item clauses)
                  do (write item :stream stream)
                     (pprint-exit-if-list-exhausted)
                     (write-char #\Space stream)
                  when (break-after-clause-p item (car clauses))
                    do (do-break)
                  when (block-indent-clause-p item)
                    do (pprint-indent client stream :block 2)
                  when (current-indent-clause-p item)
                    do (setf allow-break-p (allow-break-p item))
                       (pprint-indent client stream :current 0))
          (end-all-clauses))))))
          
