(in-package #:inravina)

(defmethod pprint-bindings (client stream object &optional colon-p at-sign-p)
  (pprint-logical-block (client stream object :prefix (if colon-p "(" "")
                                              :suffix (if colon-p ")" ""))
    (pprint-exit-if-list-exhausted)
    (loop do (pprint-linear client stream (pprint-pop) colon-p at-sign-p)
             (pprint-exit-if-list-exhausted)
             (write-char #\Space stream)
             (pprint-newline client stream :linear))))

(defmethod pprint-block (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :fill)
    (write (pprint-pop) :stream stream)))

(defmethod pprint-eval-when (client stream object &optional colon-p at-sign-p)
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-fill client stream (pprint-pop) colon-p at-sign-p)))

(defmethod pprint-do (client stream object &optional colon-p at-sign-p)
  (pprint-tagbody-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-indent client stream :current 0)
    (pprint-newline client stream :miser)
    (pprint-bindings client stream (pprint-pop) colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-newline client stream :fill)
    (pprint-linear client stream (pprint-pop) colon-p at-sign-p)))

(defmethod pprint-dolist (client stream object &optional colon-p at-sign-p)
  (pprint-tagbody-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-fill client stream (pprint-pop) colon-p at-sign-p)))

(defmethod pprint-let (client stream object &optional colon-p at-sign-p)
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-indent client stream :current 0)
    (pprint-newline client stream :miser)
    (pprint-bindings client stream (pprint-pop) colon-p at-sign-p)))

(defmethod pprint-progn (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)))

(defmethod pprint-progv (client stream object &optional colon-p at-sign-p)
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :linear)
    (pprint-linear client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-newline client stream :linear)
    (pprint-linear client stream object colon-p at-sign-p)))

(defmethod pprint-tagbody (client stream object &optional colon-p at-sign-p)
  (declare (ignore at-sign-p))
  (pprint-tagbody-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)))

(defmethod pprint-function-call (client stream object &optional colon-p at-sign-p argument-count)
  (declare (ignore at-sign-p))
  (pprint-function-call-form (client stream object colon-p at-sign-p argument-count)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-indent client stream :current 0)
    (pprint-newline client stream :fill)))

(defmethod pprint-argument-list (client stream object &optional colon-p at-sign-p argument-count)
  (declare (ignore at-sign-p))
  (pprint-function-call-form (client stream object colon-p at-sign-p argument-count)))

(defmethod pprint-with-hash-table-iterator (client stream object &optional colon-p at-sign-p)
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-argument-list client stream object colon-p at-sign-p nil)))

(defmethod pprint-with-compilation-unit (client stream object &optional colon-p at-sign-p)
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-argument-list client stream object colon-p at-sign-p 0)))

(defmethod pprint-pprint-logical-block (client stream object &optional colon-p at-sign-p)
  (pprint-body-form (client stream object colon-p at-sign-p)
    (pprint-exit-if-list-exhausted)
    (write (pprint-pop) :stream stream)
    (pprint-exit-if-list-exhausted)
    (pprint-indent client stream :block 3)
    (write-char #\Space stream)
    (pprint-newline client stream :miser)
    (pprint-argument-list client stream object colon-p at-sign-p 2)))

