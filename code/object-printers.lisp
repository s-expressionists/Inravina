(in-package #:inravina)

(defun pprint-structure-object (client stream object
                                &aux (class (class-of object)))
  (pprint-logical-block (client stream (incless:class-slot-names client class)
                         :prefix "#S(" :suffix ")")
    (let (*print-circle* *print-length* *print-level*)
      (incless:write-object client (class-name class) stream))
    (pprint-exit-if-list-exhausted)
    (write-char #\Space stream)
    (pprint-indent client stream :block 1)
    (pprint-newline client stream :miser)
    (pprint-indent client stream :current 0)
    (loop for name = (pprint-pop)
          do (incless:write-object client (intern (symbol-name name) :keyword) stream)
             (write-char #\Space stream)
             (incless:write-object client (slot-value object name) stream)
             (pprint-exit-if-list-exhausted)
             (write-char #\Space stream)
             (pprint-newline client stream :fill))))
